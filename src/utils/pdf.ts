import type { Payment, Tenant, Lease, Property, Tenant as TenantType, MaintenanceRequest } from "@/types/entities";

type KeyVal = { label: string; value: string };

async function createDoc(): Promise<import("jspdf").jsPDF> {
  const { jsPDF } = await import("jspdf");
  const doc = new jsPDF({ unit: "pt", format: "a4" });
  return doc;
}

function drawHeader(doc: import("jspdf").jsPDF, title: string, propertyName?: string) {
  const margin = 40;
  doc.setFontSize(18);
  doc.text(title, margin, margin);
  doc.setFontSize(11);
  if (propertyName) doc.text(propertyName, margin, margin + 18);
  doc.setDrawColor(220);
  doc.line(margin, margin + 26, doc.internal.pageSize.getWidth() - margin, margin + 26);
  return margin + 44; // return content start Y
}

function drawKeyValues(doc: import("jspdf").jsPDF, startY: number, pairs: KeyVal[], columns = 2) {
  const margin = 40;
  const colWidth = (doc.internal.pageSize.getWidth() - margin * 2) / columns;
  const rowHeight = 18;
  let y = startY;
  doc.setFontSize(11);
  pairs.forEach((kv, idx) => {
    const col = idx % columns;
    const x = margin + col * colWidth;
    if (col === 0 && idx > 0) y += rowHeight;
    doc.setTextColor(100);
    doc.text(kv.label, x, y);
    doc.setTextColor(10);
    doc.text(kv.value, x + 140, y);
  });
  return y + rowHeight;
}

export async function generatePaymentReceiptPDF(payment: Payment, tenant?: Tenant, lease?: Lease, property?: Property): Promise<Blob> {
  const doc = await createDoc();
  const startY = drawHeader(doc, "Payment Receipt", property?.name);
  const y2 = drawKeyValues(doc, startY, [
    { label: "Receipt Ref", value: payment.reference },
    { label: "Payment ID", value: String(payment.id ?? "-") },
    { label: "Tenant", value: tenant?.name ?? String(payment.tenantId) },
    { label: "Property", value: property?.name ?? "-" },
    { label: "Lease", value: lease ? `#${lease.id} (${lease.unit})` : String(payment.leaseId) },
    { label: "Amount", value: `KES ${payment.amount.toLocaleString()}` },
    { label: "Method", value: payment.method },
    { label: "Date", value: new Date(payment.date).toLocaleString() },
    { label: "Status", value: payment.status },
  ]);
  const margin = 40;
  doc.setDrawColor(230);
  doc.line(margin, y2 + 12, doc.internal.pageSize.getWidth() - margin, y2 + 12);
  doc.setFontSize(10);
  doc.text("Received by: ________________________", margin, y2 + 36);
  doc.text("Authorized by: ______________________", margin + 260, y2 + 36);
  doc.setTextColor(120);
  doc.text("Generated by KenRent Manager", margin, doc.internal.pageSize.getHeight() - 30);
  return doc.output("blob") as Blob;
}

export async function generateLeasePDF(lease: Lease, tenant?: Tenant, property?: Property): Promise<Blob> {
  const doc = await createDoc();
  const startY = drawHeader(doc, "Lease Agreement", property?.name);
  const y2 = drawKeyValues(doc, startY, [
    { label: "Lease ID", value: String(lease.id ?? "-") },
    { label: "Tenant", value: tenant?.name ?? String(lease.tenantId) },
    { label: "Property", value: property?.name ?? String(lease.propertyId) },
    { label: "Unit", value: lease.unit },
    { label: "Start Date", value: new Date(lease.startDate).toLocaleDateString() },
    { label: "End Date", value: new Date(lease.endDate).toLocaleDateString() },
    { label: "Rent", value: `KES ${lease.rentAmount.toLocaleString()}` },
    { label: "Status", value: String(lease.status) },
  ]);
  const margin = 40;
  doc.setDrawColor(230);
  doc.line(margin, y2 + 12, doc.internal.pageSize.getWidth() - margin, y2 + 12);
  doc.setFontSize(10);
  doc.text("Tenant Signature: ________________________", margin, y2 + 36);
  doc.text("Owner Signature: _________________________", margin + 260, y2 + 36);
  doc.setTextColor(120);
  doc.text("Generated by KenRent Manager", margin, doc.internal.pageSize.getHeight() - 30);
  return doc.output("blob") as Blob;
}

export async function generateTenantsPDF(tenants: TenantType[], propertyNameById: Map<number, string>): Promise<Blob> {
  const doc = await createDoc();
  const startY = drawHeader(doc, "Tenants", undefined);
  // Table headers
  doc.setFontSize(10);
  const headers = ["Name", "Unit", "Phone", "Rent", "Status", "Payment", "Property"];
  const margin = 40;
  const colWidths = [120, 120, 120, 80, 70, 80, 120];
  let x = margin; let y = startY;
  headers.forEach((h, i) => { doc.text(h, x, y); x += colWidths[i]; });
  y += 16;
  tenants.slice(0, 40).forEach((t, rowIdx) => {
    x = margin;
    const cells = [
      t.name,
      t.unit,
      t.phone,
      `KES ${t.rentAmount.toLocaleString()}`,
      t.status,
      t.paymentStatus,
      propertyNameById.get(t.propertyId) ?? String(t.propertyId),
    ];
    cells.forEach((c, i) => { doc.text(String(c), x, y); x += colWidths[i]; });
    y += 16;
  });
  return doc.output("blob") as Blob;
}

export async function generatePropertiesPDF(properties: Property[]): Promise<Blob> {
  const doc = await createDoc();
  const startY = drawHeader(doc, "Properties", undefined);
  doc.setFontSize(10);
  const headers = ["Name", "Location", "Units", "Revenue", "Status"];
  const margin = 40;
  const colWidths = [160, 160, 80, 100, 80];
  let x = margin; let y = startY;
  headers.forEach((h, i) => { doc.text(h, x, y); x += colWidths[i]; });
  y += 16;
  properties.slice(0, 50).forEach((p) => {
    x = margin;
    const cells = [
      p.name,
      p.location,
      `${p.occupiedUnits}/${p.totalUnits}`,
      `KES ${p.monthlyRevenue.toLocaleString()}`,
      p.status,
    ];
    cells.forEach((c, i) => { doc.text(String(c), x, y); x += colWidths[i]; });
    y += 16;
  });
  return doc.output("blob") as Blob;
}

export async function generateMaintenancePDF(
  requests: MaintenanceRequest[],
  propertyNameById: Map<number, string>,
  tenantNameById: Map<number, string>
): Promise<Blob> {
  const doc = await createDoc();
  const startY = drawHeader(doc, "Maintenance Requests", undefined);
  doc.setFontSize(10);
  const headers = ["Title", "Property", "Tenant", "Priority", "Status", "Submitted", "Est. Cost"];
  const margin = 40;
  const colWidths = [140, 120, 120, 70, 80, 90, 80];
  let x = margin; let y = startY;
  headers.forEach((h, i) => { doc.text(h, x, y); x += colWidths[i]; });
  y += 16;
  requests.slice(0, 50).forEach((r) => {
    x = margin;
    const cells = [
      r.title,
      propertyNameById.get(r.propertyId) ?? String(r.propertyId),
      r.tenantId ? (tenantNameById.get(r.tenantId) ?? String(r.tenantId)) : "-",
      r.priority,
      r.status,
      new Date(r.dateSubmitted).toLocaleDateString(),
      r.estimatedCost != null ? `KES ${r.estimatedCost.toLocaleString()}` : "-",
    ];
    cells.forEach((c, i) => { doc.text(String(c), x, y); x += colWidths[i]; });
    y += 16;
  });
  return doc.output("blob") as Blob;
}


